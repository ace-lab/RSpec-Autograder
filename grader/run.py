#!/usr/bin/python3
import os
from re import match as re_match
from json import dumps as json_dumps
from json import loads as json_loads
from typing import Dict, List
from suite import Suite
from parse import parseOutput

SUITES_DIR: str = 'suites'
# the following should be in the SUITES_DIR
SOLUTION_DIR: str = f"{SUITES_DIR}/solution"
SUBMISSION_DIR: str = f"{SUITES_DIR}/submission"
SUITE_REGEX: str = '^suite[0-9]+$' 
# this will be made when this script is run
WORK_DIR: str = 'working'

# this can be defined properly in `parse.py`
GRADING_SCRIPT: str = f"{os.getenv('_GRADING_SCRIPT')} {WORK_DIR}/{os.getenv('_ENTRY_FILE')}"

assert os.path.exists('/grade'), "ERROR: /grade not found! Mounting may have failed."

with open(f"{SUITES_DIR}/meta.json", 'r') as info:
    grading_info = json_loads(info.read())
with open("/grade/data/data.json", 'r') as data:
    submission_data = json_loads(data.read())   

def lsSuites(dir: str = SUITES_DIR):
    """get the folder names that match SUITE_REGEX"""
    yield from filter(
        lambda name: re_match(SUITE_REGEX),
        os.listdir(dir)
    )

def load_suite(suite_name: str, solution: bool) -> Suite:
    """Empties the working directory, copies in the necessary files from common/, the suite, and the submission"""
    # nuke working directory
    os.system(f"rm {WORK_DIR}/*") 
    # copy common files
    os.system(f"cp {SUITES_DIR}/common/* {WORK_DIR}/")
    # copy in files from the suite
    os.system(f"cp {SUITES_DIR}/{suite_name}/* {WORK_DIR}/")

    # copy the submitted files
    if solution:
        sub_dir = SOLUTION_DIR
    else:
        sub_dir = SUBMISSION_DIR

    ## append the submitted code snippet
    os.system(f"cat {sub_dir}/_submission_file >> {WORK_DIR}/{grading_info['submission_file']}")
    ## and all additionally submitted files
    os.system(f"cp {sub_dir}/* {WORK_DIR}/{grading_info['submission_root']}/")
    ## but we accidentally copy in the submission again, so let's remove that
    os.system(f"rm {WORK_DIR}/{grading_info['submission_root']}/_submission_file")

def runSuite(suite_name: str, solution: bool) -> Suite:
    """Prepares, runs, and parses the execution of a suite from its name (its folder)"""
    load_suite(suite_name=suite_name, solution=solution)
    output = os.popen(GRADING_SCRIPT).readlines()
    return parseOutput(output=output, name=suite_name)

if __name__ == '__main__':
    
    gradingData: Dict = {
        'gradable' : True,
        # this will store reports generated by Suite.grade()
        'tests' : []
    }

    if not os.path.exists(WORK_DIR):
        os.mkdir(WORK_DIR)

    # copy student submission from /grade/data/data.json 
    #   into the end of f"{SUITES_DIR}/submission/_submission_file"
    with open(f"{SUBMISSION_DIR}/_submission_file", 'a') as sub:
        sub.write(
            submission_data['submission']['submitted_answer']['student-parsons-solution']
        )

    for suite in lsSuites():
        ref: Suite = runSuite(suite_name=suite, solution=True)
        sub: Suite = runSuite(suite_name=suite, solution=False)

        score_report = Suite.grade(ref, sub)
        gradingData['tests'].append(score_report)


    with open('/grade/results/results.json', 'w') as results:
        json_data: str = json_dumps(gradingData)
        results.write(json_data)
