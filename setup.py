#!/usr/bin/python3
import os
from re import match as re_match
from json import dumps as json_dumps
from json import loads as json_loads
from typing import Dict, List
from suite import Suite
from parse import parseOutput

SUITES_DIR: str = 'suites'
# the following should be in the SUITES_DIR
SOLUTION_DIR: str = 'solution' 
SUBMISSION_DIR: str = 'submission'
SUITE_REGEX: str = '^suite[0-9]+$' 
# this will be made when this script is run
WORK_DIR: str = 'working'

# this can be defined properly in `parse.py`
GRADING_SCRIPT: str = f"{os.getenv('_GRADING_SCRIPT')} {WORK_DIR}/{os.getenv('_ENTRY_FILE')}"


def lsSuites(dir: str = SUITES_DIR):
    """get the folder names that match SUITE_REGEX"""
    yield from filter(
        lambda name: re_match(SUITE_REGEX),
        os.listdir(dir)
    )

def prepareFiles(suite_name: str, workspace: str) -> Suite:
    """Empties the working directory, copies in the necessary files from common/ and the suite"""
    os.system(f"rm {WORK_DIR}/*")
    os.system(f"cp {SUITES_DIR}/common/* {WORK_DIR}/")
    os.system(f"cp {SUITES_DIR}/{suite_name}/* {WORK_DIR}/")

def runSuite(suite_name: str, submission: str) -> Suite:
    """Prepares, runs, and parses a suite from its name (folder)"""
    prepareFiles(suite=suite_name, workspace=WORK_DIR)
    os.system(f"cp {SUITES_DIR}/{submission}/* {WORK_DIR}/")
    output = os.popen(GRADING_SCRIPT).readlines()
    return parseOutput(output=output, name=suite_name)

if __name__ == '__main__':
    
    gradingData: Dict = {
        'gradable' : True,
        # this will store reports generated by Suite.grade()
        'tests' : []
    }

    if not os.path.exists(WORK_DIR):
        os.mkdir(WORK_DIR)
    # TODO: make a directory with the student's submission

    reference: Suite = runSuite(SOLUTION_DIR, SOLUTION_DIR)

    for suite in lsSuites("suites"):
        submission_result: Suite = runSuite(suite, SUBMISSION_DIR)

        score_report = Suite.grade(reference, submission_result)
        gradingData['tests'].append(score_report)
        
    with open('/grade/results/results.json', 'w') as results:
        json_data: str = json_dumps(gradingData)
        results.write(json_data)
